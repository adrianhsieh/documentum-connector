<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="ObjectService"
    targetNamespace="http://core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="ObjectService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="ObjectService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="ObjectService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="ObjectService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.services.fs.documentum.emc.com/" schemaLocation="ObjectService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="ObjectService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="ObjectService_schema7.xsd"/>
        </xsd:schema>
    </types>
    <message name="get">
        <part element="tns:get" name="parameters"/>
    </message>
    <message name="getResponse">
        <part element="tns:getResponse" name="parameters"/>
    </message>
    <message name="SerializableException">
        <part element="ns1:SerializableException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="copy">
        <part element="tns:copy" name="parameters"/>
    </message>
    <message name="copyResponse">
        <part element="tns:copyResponse" name="parameters"/>
    </message>
    <message name="delete">
        <part element="tns:delete" name="parameters"/>
    </message>
    <message name="deleteResponse">
        <part element="tns:deleteResponse" name="parameters"/>
    </message>
    <message name="create">
        <part element="tns:create" name="parameters"/>
    </message>
    <message name="createResponse">
        <part element="tns:createResponse" name="parameters"/>
    </message>
    <message name="update">
        <part element="tns:update" name="parameters"/>
    </message>
    <message name="updateResponse">
        <part element="tns:updateResponse" name="parameters"/>
    </message>
    <message name="validate">
        <part element="tns:validate" name="parameters"/>
    </message>
    <message name="validateResponse">
        <part element="tns:validateResponse" name="parameters"/>
    </message>
    <message name="createPath">
        <part element="tns:createPath" name="parameters"/>
    </message>
    <message name="createPathResponse">
        <part element="tns:createPathResponse" name="parameters"/>
    </message>
    <message name="move">
        <part element="tns:move" name="parameters"/>
    </message>
    <message name="moveResponse">
        <part element="tns:moveResponse" name="parameters"/>
    </message>
    <message name="getObjectContentUrls">
        <part element="tns:getObjectContentUrls" name="parameters"/>
    </message>
    <message name="getObjectContentUrlsResponse">
        <part element="tns:getObjectContentUrlsResponse" name="parameters"/>
    </message>
    <portType name="ObjectServicePort">
        <operation name="get">
            <documentation><![CDATA[ The get operation retrieves a set of objects from the repository based on the contents of an ObjectIdentitySet.
 The get operation always returns the version of the object specified by ObjectIdentity; if the ObjectIdentity
 identifies a non-CURRENT version, the get operation returns the non-CURRENT version. The operation will also
 return related objects if instructed to do so by RelationshipProfile settings.

 @param forObjects  Contains a list of ObjectIdentity instances specifying the repository objects to be retrieved.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return fully populated DataObjects and their ReferenceRelations in case filter mode is not
         defined.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:get"/>
            <output message="tns:getResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="copy">
            <documentation><![CDATA[ The copy operation copies a set of repository objects from one location to another, either within a single
 repository, or from one repository to another. During the copy operation, the service can optionally make
 modifications to the objects being copied.<p>

 Note: For the service to copy an object from one repository to another, the ServiceContext must be set up to
 provide the service with access to both repositories. This can be done by setting up a separate
 RepositoryIdentity for each repository, or by use of a BasicIdentity, which provides default user credentials for
 multiple repositories. For more information on RepositoryIdentity and BasicIdentity, see DFS Development Guide,
 Identities, page 48.

 <p>Note: DataPackage can contain operation specific properties.

 @param fromObjects       is a set of identities pointing to objects that must be copied.
 @param targetLocation    Contains an ObjectIdentity that identifies the location (a cabinet or folder) into which
                          the repository objects are to be copied. If objects do not require a "parent" location.
                          Location object can be used to specify target repository.
 @param modifyObjects     optional package of data objects that need to be modified during a copy.  It is not
                          necessary to have as many "modify objects" as "from identities".  During processing of
                          each "from identity", data object with the same identity will be used to change the
                          attributes and relationships for the new object.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    It can contain CopyProfile that will modify the behaviour of the operation.
                    OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return target DataPackage with a list of objects created. By default, it will only return
         ObjectIdentity of the DataObjects with no ReferenceRelations. PropertyProfile and
         ContentProfile settings can be used to specify what data is populated.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:copy"/>
            <output message="tns:copyResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="delete">
            <documentation><![CDATA[ Operation deletes a set of objects from the repository. By default, for each object that it deletes, it deletes
 all versions. The specific behaviors of the delete operation are controlled by a DeleteProfile, which should be
 passed to the operation as part of OperationOptions.<p>

 <p>Note: DataPackage can contain operation specific properties

 @param objectsToDelete A collection of ObjectIdentity instances that uniquely identify repository objects to be
                        deleted.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    It can contain DeleteProfile that will modify the behaviour of the operation.
                    OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:delete"/>
            <output message="tns:deleteResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="create">
            <documentation><![CDATA[ Creates a set of new repository objects based on the DataObject instances contained in a DataPackage passed to
 the operation. Because each DataObject represents a new repository object, its ObjectIdentity is populated with
 only a repository name. Content Server assigns a unique object identifier when the object is created in the
 repository.

 To create an object in a specific location, or to create objects that have relationships to one another defined
 in the repository, the client can define Relationship instances in a DataObject passed to the operation. The most
 common example of this would be to create a Relationship between a newly created document and the folder in which
 it is to be created.
 All specified related objects are also created.  All content is automatically imported.

 Note: DataPackage can contain operation specific properties.

 @param dataPackage contains DataObjects that will be created
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return target DataPackage with a list of objects created. By default, it will only return
         ObjectIdentity of the DataObjects with no ReferenceRelations.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:create"/>
            <output message="tns:createResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="update">
            <documentation><![CDATA[ The update operation updates a set of repository objects using data supplied in a set of DataObject instances
 passed in a DataPackage. The update operation will only update the CURRENT version of an object. If passed an
 ObjectIdentity that identifies a non-CURRENT object, the operation will throw an exception. The updated
 repository object will be saved as the CURRENT version.

 The ObjectIdentity of each DataObject passed to the update operation must uniquely identify an existing
 repository object. The DataObject instances can contain updates to properties, content, and relationships, and
 only needs to include data that requires update.

 If a DataObject contains ReferenceRelationship instances, the corresponding relationships are created or updated
 in the repository. The update operation can also remove existing relationships. It can therefore be used,
 for example, to unlink an object from a folder and link it into another folder. If the DataObject contains
 ObjectRelationship instances, then the related objects are either updated or created, depending on whether they
 already exist in the repository. If the object does not exist, it is created; if it does exist, it is updated.

 Updates all data object in the data package using the specified target repository. All specified related objects
 are also updated.  All content is automatically saved as CURRENT as well.

 Note: DataPackage can contain operation specific properties

 @param dataPackage A collection of DataObject instances that contain modifications to repository objects. The
                    ObjectIdentity of each DataObject instance must uniquely identity the repository object to
                    update. The DataObject instance need only contain data that is to be modified on the
                    repository object; data that is to remain unchanged need not be supplied.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return DataPackage, which by default is populated with DataObject instances that contain only an ObjectIdentity.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:update"/>
            <output message="tns:updateResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="validate">
            <documentation><![CDATA[ The validate operation validates a set of DataObject instances against repository data dictionary rules, testing
 whether the DataObject instances represent valid repository objects, and whether the DataObject properties
 represent valid repository properties.

 @param dataPackage A collection of DataObject instances to be validated by the operation.
 @return  a ValidationInfoSet, which contains a list of ValidationInfo objects. Each ValidationInfo contains a
          DataObject and a list of any ValidationIssue instances that were raised by the operation. A
          ValidationIssue can be of enum type ERROR or WARNING.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:validate"/>
            <output message="tns:validateResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="createPath">
            <documentation><![CDATA[ The createPath operation creates a folder structure (from the cabinet down) in a repository. Notice that only
 "object_name" property will be set for each object.<p>
 If any of the folders specified in the path exist, no exception is thrown. This allows you to use the operation
 to create the complete path, or to add new folders to an existing path.

 @param objectPath      Contains a String in the form "/cabinetName/folderName..." that describes the complete
                        path to create.
 @param repositoryName  the repository name where the objects will be created.  
 @return Returns the ObjectIdentity of the final object in the path. For example, if the path is
         "/cabinetName/childFolder1/childFolder2", the operation will return the ObjectIdentity of childFolder2.
 @throws CoreServiceException
]]></documentation>
            <input message="tns:createPath"/>
            <output message="tns:createPathResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="move">
            <documentation><![CDATA[ The move operation moves a set of repository objects from one location into another, and provides the optional
 capability of updating the repository objects as they are moved. The move operation will only move the CURRENT
 version of an object. If passed an ObjectIdentity that identifies a non-CURRENT object, the operation will throw
 an exception (unless non-CURRENT objects are specifically permitted by a MoveProfile).<p>

 <p>Note: Move from one repository into another repository is not permitted.
          DataPackage can contain operation specific properties.

 @param fromObjects    A collection of ObjectIdentity instances that identify the repository objects to be moved.
 @param sourceLocation Contains an ObjectIdentity that identifies the location (a cabinet or folder) from which
                       the repository objects are to be moved.
 @param targetLocation Contains an ObjectIdentity that identifies the location (a cabinet or folder) into which
                       the repository objects are to be moved.
 @param modifyObjects  Optionally contains a set of DataObject instances that contain modifications (such as
                       changes to property values, content, or relationships) to all or some of the repository
                       objects being moved. The ObjectIdentity of each DataObject must uniquely identify one of
                       the moved objects. The modifications supplied in the DataObject are applied during the move
                       operation.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    It can contain MoveProfile that will modify the behaviour of the operation.
                    OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return a DataPackage containing one DataObject for each repository object created by the move operation. By
         default, each DataObject contains only the ObjectIdentity of the created object and no other data. The
         client can modify this behavior by using Profile objects if it requires more data about the moved objects.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:move"/>
            <output message="tns:moveResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getObjectContentUrls">
            <documentation><![CDATA[ Returns an array of ContentUrl objects based on specified object identities.  Notice that more than one
 ContentUrl can be returned per object identity.

 @param forObjects   A collection of ObjectIdentity instances for which to obtain UrlContent objects.
 @return List<ObjectContentSet>  each ObjectContentSet contains a list of UrlContent objects.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getObjectContentUrls"/>
            <output message="tns:getObjectContentUrlsResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
    </portType>
    <binding name="ObjectServicePortBinding" type="tns:ObjectServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="get">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="copy">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="delete">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="create">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="update">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="validate">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="createPath">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="move">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getObjectContentUrls">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="ObjectService">
        <documentation><![CDATA[ObjectService Provides fundamental operations for creating, getting, updating, and deleting repository objects, as
 well as copy and move operations<p>

 The object service provides a set of basic operations on repository objects, in cases where the client does not need
 to explicitly use the version control system. Each operation within the object service uses default behaviors as
 relates to object versions that are appropriate for the specific operation. All of the object services can operate
 on multiple objects (contained in either a DataPackage or an ObjectIdentitySet), enabling clients to optimize service
 usage by minimizing the number of service interactions.

 @see com.emc.documentum.fs.datamodel.core.OperationOptions
 @see com.emc.documentum.fs.datamodel.core.profiles.Profile

 @since 6.0]]></documentation>
        <port binding="tns:ObjectServicePortBinding" name="ObjectServicePort">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </port>
    </service>
</definitions>
