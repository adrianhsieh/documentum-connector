<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="VersionControlService"
    targetNamespace="http://core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.services.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="VersionControlService_schema7.xsd"/>
        </xsd:schema>
    </types>
    <message name="getCurrent">
        <part element="tns:getCurrent" name="parameters"/>
    </message>
    <message name="getCurrentResponse">
        <part element="tns:getCurrentResponse" name="parameters"/>
    </message>
    <message name="SerializableException">
        <part element="ns1:SerializableException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <message name="checkin">
        <part element="tns:checkin" name="parameters"/>
    </message>
    <message name="checkinResponse">
        <part element="tns:checkinResponse" name="parameters"/>
    </message>
    <message name="checkout">
        <part element="tns:checkout" name="parameters"/>
    </message>
    <message name="checkoutResponse">
        <part element="tns:checkoutResponse" name="parameters"/>
    </message>
    <message name="cancelCheckout">
        <part element="tns:cancelCheckout" name="parameters"/>
    </message>
    <message name="cancelCheckoutResponse">
        <part element="tns:cancelCheckoutResponse" name="parameters"/>
    </message>
    <message name="getCheckoutInfo">
        <part element="tns:getCheckoutInfo" name="parameters"/>
    </message>
    <message name="getCheckoutInfoResponse">
        <part element="tns:getCheckoutInfoResponse" name="parameters"/>
    </message>
    <message name="getVersionInfo">
        <part element="tns:getVersionInfo" name="parameters"/>
    </message>
    <message name="getVersionInfoResponse">
        <part element="tns:getVersionInfoResponse" name="parameters"/>
    </message>
    <message name="deleteVersion">
        <part element="tns:deleteVersion" name="parameters"/>
    </message>
    <message name="deleteVersionResponse">
        <part element="tns:deleteVersionResponse" name="parameters"/>
    </message>
    <message name="deleteAllVersions">
        <part element="tns:deleteAllVersions" name="parameters"/>
    </message>
    <message name="deleteAllVersionsResponse">
        <part element="tns:deleteAllVersionsResponse" name="parameters"/>
    </message>
    <portType name="VersionControlServicePort">
        <operation name="getCurrent">
            <documentation><![CDATA[ Retrieves objects from the repository and returns them in the Data Package.  This operation will
 walk the version tree and return the CURRENT object.  It will return the current version for the object pointed
 by the object Identity regardless of its position in the version tree.
 <p>
 Note: If it is necessary to retrieve objects by Label, version, etc please use QueryService.

 @param forObjects  A collection of ObjectIdentity instances that uniquely identify the repository objects of
                    which the CURRENT version will be exported.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return resulting DataObject. By default, it will return DataObject with all content. PropertyProfile
         and ContentProfile settings can be used to specify what data is populated.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getCurrent"/>
            <output message="tns:getCurrentResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="checkin">
            <documentation><![CDATA[ Checks in a set of repository objects using data contained in a DataPackage. It provides control over how the
 checked in object is versioned and whether the object remains checked out and locked by the user after the
 changes are versioned, and provides a mechanism for applying symbolic version labels to the checkedâ€‘in versions.
 The ObjectIdentity of each DataObject passed to the operation is expected to match the identity of a checked out
 repository object.<p>
 
 @param dataPackage Contains a set of DataObject instances that are to be checked in as new versions of checked
                    out repository objects.
 @param versionStrategy Specifies option for incrementing the version number of the new version.
 @param isRetainLock    Specifies whether the object is to remain checked out and locked by the user after the new
                        version is saved.
 @param symbolicLabels  optional parameter that allows to set custom version labels for the objects.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    It can contain CheckinProfile that will modify the behaviour of the operation.
                    OperationOptions can also contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return resulting DataPackage. By default, it will only return ObjectIdentity filled in for each DataObject.
 @throws com.emc.documentum.fs.services.core.CoreServiceException

 @see com.emc.documentum.fs.datamodel.core.profiles.CheckinProfile
]]></documentation>
            <input message="tns:checkin"/>
            <output message="tns:checkinResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="checkout">
            <documentation><![CDATA[ Performs checkout operation for a set of repository objects. Any version of the object can be checked out.

 @param objectIdentitySet A collection of ObjectIdentity instances that uniquely identify the repository objects
                          to check out.
 @param options     An object containing profiles and properties that specify operation behaviors. If this object
                    is null, default operation behaviors will take effect.
                    It can contain CheckoutProfile that will modify the behaviour of the operation. 
                    OperationOptions can contain PropertyProfile, ContentProfile, PermissionProfile,
                    RelationshipProfile that will be used to populate the returned DataPackage. Also it can
                    contain ContentTransferProfile to specify the specifics of content transfer.
 @return resulting DataObject. By default, it will return DataObject with all content. PropertyProfile
         and ContentProfile settings can be used to specify what data is populated.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:checkout"/>
            <output message="tns:checkoutResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="cancelCheckout">
            <documentation><![CDATA[ Performs cancel checkout for the specified objects.

 @param objectIdentitySet A collection of ObjectIdentity instances that uniquely identify the repository objects
                          to check out.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:cancelCheckout"/>
            <output message="tns:cancelCheckoutResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getCheckoutInfo">
            <documentation><![CDATA[ Provides checkout information about the specified objects, specifically whether the objects are checked out, and
 the user name of the user who has them checked out.

 @param objectIdentitySet  A collection of ObjectIdentity instances that uniquely identify the repository objects
                           about which to obtain checkout information.
 @return Returns a List of CheckoutInfo instances. Checkout info encapsulates data about a specific checked out
         repository object.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getCheckoutInfo"/>
            <output message="tns:getCheckoutInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="getVersionInfo">
            <documentation><![CDATA[ Provides information about a version of a repository object.

 @param objectIdentitySet A collection of ObjectIdentity instances that uniquely identify the repository objects
                          about which to provide version information.
 @return Returns a List of VersionInfo instances corresponding to the DataObject instances in the ObjectIdentitySet.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:getVersionInfo"/>
            <output message="tns:getVersionInfoResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="deleteVersion">
            <documentation><![CDATA[ Deletes a specific version of a repository object. If the deleted object is the CURRENT version, the previous
 version in the version tree is promoted to CURRENT.
 
 @param objectsToDelete A collection of ObjectIdentity instances that uniquely identify the repository object
                        versions to delete.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:deleteVersion"/>
            <output message="tns:deleteVersionResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
        <operation name="deleteAllVersions">
            <documentation><![CDATA[ Deletes all versions of a repository object. An ObjectIdentity indicating the object to delete can reference any
 version in the version tree.

 @param objectIdentitySet A collection of ObjectIdentity instances that uniquely identify the repository objects
                          of which to delete all versions.
 @throws com.emc.documentum.fs.services.core.CoreServiceException
]]></documentation>
            <input message="tns:deleteAllVersions"/>
            <output message="tns:deleteAllVersionsResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
    </portType>
    <binding name="VersionControlServicePortBinding" type="tns:VersionControlServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="getCurrent">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="checkin">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="checkout">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="cancelCheckout">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getCheckoutInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="getVersionInfo">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteVersion">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
        <operation name="deleteAllVersions">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="VersionControlService">
        <documentation><![CDATA[The version control service provides operations that enable access and changes to specific object versions.

 @see com.emc.documentum.fs.datamodel.core.OperationOptions

 @since 6.0]]></documentation>
        <port binding="tns:VersionControlServicePortBinding" name="VersionControlServicePort">
            <soap:address location="http://localhost:9080/services/core/VersionControlService"/>
        </port>
    </service>
</definitions>
