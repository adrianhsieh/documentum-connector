/**
 * (c) 2003-2012 MuleSoft, Inc. This software is protected under international
 * copyright law. All use of this software is subject to MuleSoft's Master
 * Subscription Agreement (or other Terms of Service) separately entered
 * into between you and MuleSoft. If such an agreement is not in
 * place, you may not use the software.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.module.documentum;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBException;

import org.mule.api.ConnectionException;
import org.mule.api.MuleException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.InvalidateConnectionOn;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.lifecycle.Start;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.module.documentum.coreServices.ObjectUtil;
import org.mule.module.documentum.coreServices.VersionControlUtil;

import com.emc.documentum.fs.datamodel.core.CheckoutInfo;
import com.emc.documentum.fs.datamodel.core.DataObject;
import com.emc.documentum.fs.datamodel.core.DataPackage;
import com.emc.documentum.fs.datamodel.core.ObjectIdentity;
import com.emc.documentum.fs.datamodel.core.VersionInfo;
import com.emc.documentum.fs.datamodel.core.VersionStrategy;
import com.emc.documentum.fs.datamodel.core.content.ContentTransferMode;
import com.emc.documentum.fs.datamodel.core.context.RepositoryIdentity;
import com.emc.documentum.fs.datamodel.core.context.ServiceContext;
import com.emc.documentum.fs.services.core.SerializableException;

/**
 * Documentum Cloud Connector.
 * The Documentum Connector will allow to use the DFS SOAP API. 
 * Almost every operation that can be done via the API can be done thru this connector.
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name="documentum-connector", schemaVersion="1.0", friendlyName="Documentum Connector")
public class DocumentumConnector {
    
    /**
     * The relative URL where all API calls are made.
     */
    @Configurable
    @Optional
    @Default("/services/")
    private String apiUrl;
    
    /**
     * URL of the DFS server API
     */
    private String server;
    
    /**
     * Repository Identity
     */
    private RepositoryIdentity identity;
    
    /**
     * Service Context
     */
    private ServiceContext context;
    
    /**
     * This method initiates the Documentum client
     * 
     * @throws MuleException
     */
    @Start
    public void init() throws MuleException {
        identity = new RepositoryIdentity();
        context = new ServiceContext();
    }
    
    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @param repository A repository
     * @param server A server
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, @Password String password, String repository, String server) throws ConnectionException {
        identity.setUserName(username);
        identity.setPassword(password);
        identity.setRepositoryName(repository);
        context.getIdentities().add(identity);
        this.setServer(server);
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        context.getIdentities().remove(identity);
        identity.setUserName(null);
        identity.setPassword(null);
        identity.setRepositoryName(null);
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return (identity.getUserName()!=null && identity.getPassword()!=null && identity.getRepositoryName()!=null);
    }

    /**
     * Connection Identifier
     */
    @ConnectionIdentifier
    public String connectionId() {
        return ((Integer) identity.hashCode()).toString();
    }

    /**
     * Create Document
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param filePath path to an existing file in the local system.
     * @param format the format of the file.
     * @param folderPath path to an existing folder in the content server.
     * @param transferMode .
     * @return the ObjectIdentity.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws IOException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public ObjectIdentity createDocument(String filePath, String format, String folderPath, @Optional @Default("MTOM") ContentTransferMode transferMode) throws IOException, SerializableException, JAXBException {
        return new ObjectUtil(context, transferMode, server + apiUrl)
                .createObject("dm_document", filePath, format, null, folderPath);
    }
    
    /**
     * Create Folder
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param folderName of the folder to create.
     * @param folderPath path to an existing folder in the content server.
     * @return the ObjectIdentity.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws IOException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public ObjectIdentity createFolder(String folderName, String folderPath) throws IOException, SerializableException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl)
                .createObject("dm_folder", null, null, folderName, folderPath);
    }
    
    /**
     * Create Path
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param folderPath path to create in the content server.
     * @return the ObjectIdentity.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public ObjectIdentity createPath(String folderPath) throws MalformedURLException, SerializableException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl).createPath(folderPath);
    }
    
    /**
     * Get Object
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objectIdentity the ObjectIdentity of the object to download.
     * @param outputPath where to download the file.
     * @return the File.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws IOException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public File getObject(ObjectIdentity objectIdentity, String outputPath) throws SerializableException, IOException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl).getObject(objectIdentity, outputPath);
    }
    
    /**
     * Update Document
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objectIdentity .
     * @param newContentFilePath .
     * @param newFormat .
     * @param transferMode .
     * @param newProperties .
     * @param oldParentFolder .
     * @param newParentFolder .
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage updateDocument(ObjectIdentity objectIdentity, @Optional String newContentFilePath, 
            @Optional String newFormat, @Optional @Default("MTOM") ContentTransferMode transferMode, @Optional Map<String, String> newProperties, 
            @Optional ObjectIdentity oldParentFolder, @Optional ObjectIdentity newParentFolder) throws SerializableException, MalformedURLException, JAXBException {
        return new ObjectUtil(context, transferMode, server + apiUrl)
        .updateObject(objectIdentity, "dm_document", newContentFilePath, newFormat, newProperties, oldParentFolder, newParentFolder);
    }
    
    /**
     * Update Folder
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objectIdentity .
     * @param newProperties .
     * @param oldParentFolder .
     * @param newParentFolder .
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage updateFolder(ObjectIdentity objectIdentity, @Optional Map<String, String> newProperties, 
            @Optional ObjectIdentity oldParentFolder, @Optional ObjectIdentity newParentFolder) throws SerializableException, MalformedURLException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl)
        .updateObject(objectIdentity, "dm_folder", null, null, newProperties, oldParentFolder, newParentFolder);
    }
    
    /**
     * Delete Object
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param path .
     * @return true if the deletion was successful.
     * @throws JAXBException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public boolean deleteObject(String path) throws MalformedURLException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl).deleteObject(path);
    }
    
    /**
     * Copy Object
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param sourceObjectPathString identify the object to copy.
     * @param targetLocPathString identify the folder to copy to.
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws MalformedURLException .
     * @throws SerializableException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage copyObject(String sourceObjectPathString, String targetLocPathString) throws MalformedURLException, SerializableException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl).copyObject(sourceObjectPathString, targetLocPathString);
    }
    
    /**
     * Move Object
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param sourceObjectPathString identify the object to move.
     * @param targetLocPathString identify the folder to move from.
     * @param sourceLocPathString identify the folder to move to.
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws MalformedURLException .
     * @throws SerializableException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage moveObject(String sourceObjectPathString, String targetLocPathString, String sourceLocPathString) throws MalformedURLException, SerializableException, JAXBException {
        return new ObjectUtil(context, null, server + apiUrl).moveObject(sourceObjectPathString, targetLocPathString, sourceLocPathString);
    }
    
    /**
     * Get checkout info
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to get the checkout info.
     * @return the CheckoutInfo.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public CheckoutInfo getCheckoutInfo(ObjectIdentity objIdentity) throws SerializableException, MalformedURLException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl).getCheckoutInfo(objIdentity);
    }
    
    /**
     * Checkout
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to checkout.
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage checkout(ObjectIdentity objIdentity) throws SerializableException, MalformedURLException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl).checkout(objIdentity);
    }
    
    /**
     * Checkin
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to checkin.
     * @param newContentPath .
     * @param format .
     * @param versionStrategy .
     * @param labels .
     * @param isRetainLock .
     * @param transferMode .
     * @return the DataPackage.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataPackage checkin(ObjectIdentity objIdentity, String newContentPath, String format, @Optional @Default("NEXT_MINOR") VersionStrategy versionStrategy, List<String> labels, @Optional @Default("false") boolean isRetainLock, @Optional @Default("MTOM") ContentTransferMode transferMode) throws SerializableException, MalformedURLException, JAXBException {
        return new VersionControlUtil(context, transferMode, server + apiUrl)
        .checkin(objIdentity, newContentPath, format, versionStrategy, labels, isRetainLock);
    }
    
    /**
     * Cancel Checkout
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to cancel the checkout.
     * @return true if the cancellation was successful.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public boolean cancelCheckout(ObjectIdentity objIdentity) throws MalformedURLException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl)
        .cancelCheckout(objIdentity);
    }
    
    /**
     * Delete Version
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to delete.
     * @return true if the deletion was successful.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public boolean deleteVersion(ObjectIdentity objIdentity) throws MalformedURLException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl)
        .deleteVersion(objIdentity);
    }
    
    /**
     * Delete All Versions
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to delete.
     * @return true if the deletion was successful.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public boolean deleteAllVersions(ObjectIdentity objIdentity) throws MalformedURLException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl)
        .deleteAllVersions(objIdentity);
    }
    
    /**
     * Get Current
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to get the current version.
     * @return the DataObject.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public DataObject getCurrent(ObjectIdentity objIdentity) throws MalformedURLException, SerializableException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl)
        .getCurrent(objIdentity);
    }
    
    /**
     * Get Version Info
     *
     * {@sample.xml ../../../doc/documentum-connector.xml.sample documentum-connector:create-document}
     *
     * @param objIdentity identify the object to get the version info.
     * @return the VersionInfo.
     * @throws JAXBException .
     * @throws SerializableException .
     * @throws MalformedURLException .
     */
    @Processor
    @InvalidateConnectionOn(exception = DocumentumConnectorException.class)
    public VersionInfo getVersionInfo(ObjectIdentity objIdentity) throws MalformedURLException, SerializableException, JAXBException {
        return new VersionControlUtil(context, null, server + apiUrl)
        .getVersionInfo(objIdentity);
    }
    
    public String getApiUrl() {
        return apiUrl;
    }

    public void setApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
    }

    public String getServer() {
        return server;
    }

    public void setServer(String server) {
        if (!server.startsWith("http://")) {
            server = "http://" + server;
        }
        
        if (server.endsWith("/")) {
            server = server.substring(0, server.length() - 1);
        }
        
        this.server = server;
    }

    public RepositoryIdentity getIdentity() {
        return identity;
    }
    
    public void setIdentity(RepositoryIdentity identity) {
        this.identity = identity;
    }
    
    public ServiceContext getContext() {
        return context;
    }
    
    public void setContext(ServiceContext context) {
        this.context = context;
    }
    
}