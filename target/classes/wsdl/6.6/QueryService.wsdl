<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.3-b02-. -->
<definitions name="QueryService"
    targetNamespace="http://core.services.fs.documentum.emc.com/"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
    xmlns:tns="http://core.services.fs.documentum.emc.com/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <types>
        <xsd:schema>
            <xsd:import
                namespace="http://schema.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema1.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import namespace="http://rt.fs.documentum.emc.com/" schemaLocation="QueryService_schema2.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://query.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema3.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://properties.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema4.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://profiles.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema5.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.services.fs.documentum.emc.com/" schemaLocation="QueryService_schema6.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema7.xsd"/>
        </xsd:schema>
        <xsd:schema>
            <xsd:import
                namespace="http://content.core.datamodel.fs.documentum.emc.com/" schemaLocation="QueryService_schema8.xsd"/>
        </xsd:schema>
    </types>
    <message name="execute">
        <part element="tns:execute" name="parameters"/>
    </message>
    <message name="executeResponse">
        <part element="tns:executeResponse" name="parameters"/>
    </message>
    <message name="SerializableException">
        <part element="ns1:SerializableException" name="fault" xmlns:ns1="http://rt.fs.documentum.emc.com/"/>
    </message>
    <portType name="QueryServicePort">
        <operation name="execute">
            <documentation><![CDATA[  The execute operation runs a query against data in a repository and returns the results to the client as a
 QueryResult containing a DataPackage.<p>

 Executes a DQL query. <p>
 Notes: <p>
 1) Only PassthroughQuery is supported for query parameter. <p>
 2) Only one repository can be specified in the query otherwise an CoreServiceException will be thrown.
 3) When cache strategy is used, query id can be set in execution for sequential processing of cached query results.
    Considering cache expiration, the query string should also be set in query, which will be used to update the cache.
    Make sure the original query string is used.

 @param query - query object
 @param execution various parameters for query execution (cache strategy, max result, starting index, query id,...)
 @param options service options (override profiles were passed using ServiceContext)
 @return QueryResult result of query execution. <p>
  <li> If succeed QueryResult.status.repositoryStatusInfos[0].status == Status.SUCCESS
  <li> If failed and if Continue-on-exception-payload-policy (see {@link com.emc.documentum.fs.rt.context.IServiceContext#PAYLOAD_PROCESSING_POLICY PAYLOAD_PROCESSING_POLICY}) is used then QueryResult.status.repositoryStatusInfos[0].status == Status.FAILURE
  <li> If failed and if Continue-on-exception-payload-policy is not used then an exception will be thrown 
  <li> If query have more elements than were returned QueryResult.status.hasMoreResults is set to true otherwise to
    false
 @throws CoreServiceException
 @throws QueryValidationException
 @throws CacheException
 @see com.emc.documentum.fs.datamodel.core.query.PassthroughQuery
 @see com.emc.documentum.fs.datamodel.core.query.QueryExecution
 @see com.emc.documentum.fs.datamodel.core.OperationOptions
 @see com.emc.documentum.fs.datamodel.core.query.QueryResult
]]></documentation>
            <input message="tns:execute"/>
            <output message="tns:executeResponse"/>
            <fault message="tns:SerializableException" name="SerializableException"/>
        </operation>
    </portType>
    <binding name="QueryServicePortBinding" type="tns:QueryServicePort">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="execute">
            <soap:operation soapAction=""/>
            <input>
                <soap:body use="literal"/>
            </input>
            <output>
                <soap:body use="literal"/>
            </output>
            <fault name="SerializableException">
                <soap:fault name="SerializableException" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="QueryService">
        <documentation><![CDATA[Query service is a primary mechanism for retrieving information from a repository. Query Service is general purpose
 and uses execution semantics similar to the use of queries in an RDBMS. The service returns a data set resulting from
 the query to the user either directly or through asynchronous caching.
 
 @since 6.0]]></documentation>
        <port binding="tns:QueryServicePortBinding" name="QueryServicePort">
            <soap:address location="http://localhost:9080/services/core/QueryService"/>
        </port>
    </service>
</definitions>
